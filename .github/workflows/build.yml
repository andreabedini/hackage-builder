name: Build a package

run-name: Build ${{ inputs.package-id }} with GHC ${{ inputs.ghc-version }}

on:
  workflow_dispatch:
    inputs:
      package-id:
        description: Package to build
        required: true
        type: string
      ghc-version:
        description: GHC version to use
        required: true
        type: choice
        options:
          - 8.10.7
          - 9.0.2
          - 9.2.5
          - 9.4.3
      index-state:
        description: Index state to use
        required: false
        default: HEAD
      documentation:
        description: Enable documentation
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on:
      - ubuntu-22.04

    steps:

      ## GHC toolchain
    
      - name: Set up ghc cache
        id: ghc-cache
        uses: actions/cache@v3
        with:
          path: ghc
          key: ghc-${{ runner.os }}-${{ inputs.ghc-version }}

      - name: Install GHC ${{ inputs.ghc-version }}
        if: steps.ghc-cache.outputs.cache-hit != 'true'
        run: ghcup install ghc ${{ inputs.ghc-version }} --isolate $PWD/ghc

      - name: Add ghc bin to path
        run: echo "$PWD/ghc/bin" >> $GITHUB_PATH

      - name: Set up cabal cache
        id: cabal-cache
        uses: actions/cache@v3
        with:
          path: cabal
          key: cabal-${{ runner.os }}-${{ inputs.ghc-version }}-${{ github.run_id }}
          restore-keys: cabal-${{ runner.os }}-${{ inputs.ghc-version }}

      # Note: cache-hit is set to true only when cache hit occurs for the exact key match.
      # For a partial key match like the one above, it will be set to false.
      - name: Install cabal if necessary
        run: |
          [[ -x $PWD/cabal/bin/cabal ]] || ghcup install cabal latest --isolate $PWD/cabal/bin

      - name: Add cabal bin to path
        run: echo "$PWD/cabal/bin" >> $GITHUB_PATH

      - name: Set cabal dir
        run: echo "CABAL_DIR=$PWD/cabal" >> $GITHUB_ENV

      # Why don't we have a binary distribution!?
      - name: Build and install cabal-plan
        id: cabal-plan
        run: |
          cabal update
          cabal install cabal-plan --install-method=copy --overwrite-policy=always --constraint='cabal-plan +exe'
        # A failure here is not essential
        continue-on-error: true

      ## Project

      - name: Checkout project config
        uses: actions/checkout@v2
        with:
          path: project

      - name: Set up project for ${{ inputs.package-id }}
        working-directory: project
        run: |
          # We need at least an empty cabal.project to avoid the implicit one
          touch cabal.project
          # Build cabal.project.local from inputs
          echo 'extra-packages: ${{ inputs.package-id }}' >> cabal.project.local
          echo 'index-state: ${{ inputs.index-state }}' >> cabal.project.local
          if [[ '${{ inputs.documentation }}' == 'true' ]]; then
            echo -e 'package *\n  documentation: True' >> cabal.project.local
          fi
          # Logging
          echo '=================================================='
          echo 'content of cabal.project '
          cat cabal.project
          echo '=================================================='
          echo 'content of cabal.project.local '
          cat cabal.project.local
          echo '=================================================='
          # Parse package-id
          PACKAGE_NAME_REGEX='(.*)(-([0-9]+)(.[0-9]+)*)?$'
          [[ ${{ inputs.package-id }} =~ $PACKAGE_NAME_REGEX ]]
          echo "PACKAGE_NAME=${BASH_REMATCH[1]}" >> $GITHUB_ENV

      - name: Run cabal update for project
        working-directory: project
        run: cabal update

      - name: Formulate install plan for ${{ inputs.package-id }}
        working-directory: project
        run: cabal build --dry-run ${{ env.PACKAGE_NAME }}

      - name: Display cabal-plan
        working-directory: project
        # This might not work
        if: ${{ steps.cabal-plan.conclusion == 'success' }}
        run: cabal-plan

      - name: Build ${{ inputs.package-id }} dependencies
        working-directory: project
        run: cabal build ${{ env.PACKAGE_NAME }} --only-dependencies

      - name: Build ${{ inputs.package-id }}
        id: cabal-build
        working-directory: project
        run: cabal build ${{ env.PACKAGE_NAME }}

      # Workaround for cabal not display build errors (to be submitted)
      - name: Show build failure
        working-directory: project
        if: ${{ failure() && steps.cabal-build.conclusion == 'failure' }}
        run: |
          ID=$(jq -r '."install-plan"[].id | select(startswith(env.PACKAGE_NAME))' < dist-newstyle/cache/plan.json)
          cat $HOME/.cabal/logs/ghc-${{ inputs.ghc-version }}/$ID.log
