name: Builder

run-name: Build ${{ inputs.package-id }} with GHC ${{ inputs.ghc-version }}

on:
  workflow_dispatch:
    inputs:
      package-id:
        description: Package to build
        required: true
        type: string
      ghc-version:
        description: GHC version to use
        required: true
        type: choice
        options:
          - 8.10.7
          - 9.0.2
          - 9.2.5
          - 9.4.3
      cabal-version:
        description: Cabal version to use
        required: false
        default: latest
      index-state:
        description: Index state to use
        required: false
        default: HEAD
      documentation:
        description: Enable documentation
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on:
      - ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup GHC ${{ inputs.ghc-version }}
        id: setup-haskell
        uses: haskell/actions/setup@v2
        with:
          ghc-version: ${{ inputs.ghc-version }}
          cabal-version: ${{ inputs.cabal-version }}

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ runner.os }}-${{ inputs.ghc-version }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ inputs.ghc-version }}

      - name: Build and install cabal-plan
        id: cabal-plan
        run: |
          cd $(mktemp -d)
          cabal install cabal-plan --constraint='cabal-plan +exe'
          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
        # A failure here is not essential
        continue-on-error: true

      - name: Set up project for ${{ inputs.package-id }}
        run: |
          # We need at least an empty cabal.project to avoid the implicit one
          touch cabal.project
          # Build cabal.project.local from inputs
          echo 'extra-packages: ${{ inputs.package-id }}' >> cabal.project.local
          echo 'index-state: ${{ inputs.index-state }}' >> cabal.project.local
          if [[ '${{ inputs.documentation }}' == 'true' ]]; then
            echo -e 'package *\n  documentation: True' >> cabal.project.local
          fi
          # Logging
          echo '=================================================='
          echo 'content of cabal.project '
          cat cabal.project
          echo '=================================================='
          echo 'content of cabal.project.local '
          cat cabal.project.local
          echo '=================================================='
          # Parse package-id
          PACKAGE_NAME_REGEX='(.*)-([0-9]+)(.[0-9]+)*$'
          [[ ${{ inputs.package-id }} =~ $PACKAGE_NAME_REGEX ]]
          echo "PACKAGE_NAME=${BASH_REMATCH[1]}" >> $GITHUB_ENV

      - name: Formulate install plan for ${{ inputs.package-id }}
        run: cabal build --dry-run ${{ env.PACKAGE_NAME }}

      - name: Display cabal-plan
        if: ${{ steps.cabal-plan.conclusion == 'success' }}
        run: cabal-plan

      - name: Build ${{ inputs.package-id }} dependencies
        run: cabal build ${{ env.PACKAGE_NAME }} --only-dependencies

      - name: Build ${{ inputs.package-id }}
        run: cabal build ${{ env.PACKAGE_NAME }}
